using PublicAI.Net.Models;

namespace PublicAI.Net.Simplified;
public class ChatContext
{
    private readonly PublicAIClient _client;

    private string? _model;

    private readonly List<ChatMessage> _messages;

    internal ChatContext(PublicAIClient client, string? model = null, List<string>? systemMessages = null)
    {
        _client = client;
        _model = model;
        _messages = systemMessages?.Select(content => new ChatMessage(ChatMessageRole.System, content)).ToList() ?? [];
    }

    public async Task<string> GetModelAsync(CancellationToken cancellationToken)
    {
        if (_model != null)
        {
            return _model;
        }

        if (ChatContextCache.DefaultModel != null)
        {
            _model = ChatContextCache.DefaultModel;
            return _model;
        }

        ModelResponse? models = await _client.ListModelsAsync(cancellationToken);
        if (models == null || models.Data.Count() == 0)
        {
            throw new InvalidOperationException("No models available from the API.");
        }

        _model = models.Data.First().Id;

        return _model;
    }

    /// <summary>
    ///     Commits a new user message to the chat context and gets a response from the API. <br />
    ///     Automatically continue the conversation by including all previous messages in the context.
    /// </summary>
    /// <param name="userMessage">New user message.</param>
    /// <param name="cancellationToken">A cancellation token.</param>
    /// <returns>Response generated by the AI.</returns>
    /// <exception cref="InvalidOperationException">Thrown when the API fails to respond with an answer.</exception>
    public async Task<ChatCompletionReponse> ChatAsync(string userMessage, CancellationToken cancellationToken = default)
    {
        _messages.Add(new ChatMessage(ChatMessageRole.User, userMessage));
        ChatCompletionRequest request = new ChatCompletionRequest(await GetModelAsync(cancellationToken), _messages);
        ChatCompletionReponse? response = await _client.ChatAsync(request, cancellationToken);

        if (response == null)
        {
            _messages.RemoveAt(_messages.Count - 1);
            throw new InvalidOperationException("No response from the API.");
        }

        _messages.AddRange(response.Choices.Select(c => c.Message));
        return response;
    }
}
